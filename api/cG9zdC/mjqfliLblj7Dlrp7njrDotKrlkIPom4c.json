{"title":"控制台实现贪吃蛇","date":"2019-09-03T08:41:43.000Z","author":"Xinyi Zhang","link":"post/控制台实现贪吃蛇","updated":"2019-09-03T08:44:18.000Z","content":"<p>1.首先要有定义坐标的类，坐标类里参数包括(x,y)。</p>\n<p>2.其次定义snake类。用蛇身各点坐标描述蛇的位置，可将蛇的位置分为蛇头和蛇身来描述，蛇头为一个坐标点，使用#表示，蛇身为一个数组，数组各值表示蛇身各点位置。再定义几个成员函数，包括蛇的上下左右移动、蛇吃到食物后变长、蛇直径前行、判断蛇是否出边界或撞向自己、蛇是否吃到食物、显示蛇的图案。</p>\n<p>3.然后定义一些函数。有界面上围墙的形成、光标的移动、食物的随机产生。</p>\n<p>4.最后通过主函数的调用实现。</p>\n<p>cpp：</p>\n<pre><code>#include &quot;pch.h&quot;\n#include &lt;iostream&gt;\n#include &lt;Windows.h&gt;\n#define n 20\n#include &lt;conio.h&gt;\n#include&lt;time.h&gt;\n#include&lt;cstring&gt;\n#include&lt;cstdio&gt;\n#include &quot;stdlib.h&quot;\nusing namespace std;\n//控制光标\nvoid gotoxy(int x, int y)\n{\nCOORD pos;\npos.X = x;\npos.Y = y;\nSetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);\n}\nvoid gotoxy(int x, int y, HANDLE consoleBuf) {\nCOORD pos;\npos.X = x;\npos.Y = y;\nSetConsoleCursorPosition(consoleBuf, pos);\n}\n//坐标类\ntemplate&lt;typename T&gt;\nclass sPoint {\npublic:\nT x, y;\nsPoint() {};\nsPoint(T xval, T yval) :x(xval), y(yval) {};\nsPoint&lt;T&gt; &amp; operator = (const sPoint&lt;T&gt; &amp; rval) {\n    this-&gt;x = rval.x;\n    this-&gt;y = rval.y;\n    return *this;\n}\n};\n\n//方向\nenum Direction {\nleft=&apos;a&apos;,right=&apos;d&apos;\n};\n\n//随机产生一个食物\ndouble * setFood()\n{\ndouble *a=new double[2];\nint x, y;\nsrand(time(0));//随机种子\ndo {\n    x = rand() % 50 + 1;\n    y = rand() % 30 + 1;\n    break;\n} while (1);\ngotoxy(x, y);\na[0] = x;\na[1] = y;//将生成的食物坐标存储起来\nstd::cout &lt;&lt; &apos;0&apos; ;\nreturn a;\n}\n//生成围墙\nvoid getWall()\n{\n    sPoint&lt;double&gt; wall;\n    wall.x = 0;\n    wall.y =0;\n    while (wall.y &lt;= 30)\n    {\n        gotoxy(50,wall.y);\n        std::cout &lt;&lt; &quot;|&quot;;\n        wall.y++;\n    }\n    gotoxy(0, 30);\n    while (wall.x &lt;= 50)\n    {\n        std::cout &lt;&lt; &quot;-&quot;;\n        wall.x++;\n    }\n}\n\n//蛇类\nclass Snake {\nprivate:\nsPoint&lt;double&gt; snakeHead;//蛇头的位置\nsPoint&lt;double&gt; snakeTail;//蛇尾的位置\nsPoint&lt;double&gt; snakeBody[n];//蛇身各点\n//int forwardTime;//前进的时间间隔\nDirection direction;\nchar sym;\nint last;\npublic:\nSnake() {};\nSnake(sPoint&lt;double&gt;  head, sPoint&lt;double&gt; tail,int Last,sPoint&lt;double&gt; body[n]) {\n    this-&gt;snakeHead = head;\n    this-&gt;snakeTail = tail;\n    this-&gt;last = Last;\n    this-&gt;snakeBody[20] = body[20];\n    snakeBody[0].x = snakeHead.x;\n    snakeBody[0].y = snakeHead.y;\n    snakeBody[0].x = 15; snakeBody[0].y = 15; snakeBody[1].x = 16; snakeBody[1].y = 15;\n    snakeBody[2].x = 17; snakeBody[2].y = 15; snakeBody[3].x = 18; snakeBody[3].y = 15;\n    last = 4;\n}\n//蛇向左转\nvoid setSnakeLeft()\n{\n    //蛇的后一点往前一点移动\n    for (int i = last-1; i &gt;= 1; i--)\n        snakeBody[i] = snakeBody[i - 1];\n    snakeHead.x = snakeHead.x - 1;\n    snakeHead.y = snakeHead.y;\n    snakeBody[0].x = snakeHead.x;\n    snakeBody[0].y = snakeHead.y;\n}\n//蛇向右转\nvoid setSnakeRight()\n{\n    //蛇的后一点往前一点移动\n    for (int i = last-1; i &gt;= 1; i--)\n        snakeBody[i] = snakeBody[i - 1];\n    snakeHead.y = snakeHead.y;\n    snakeHead.x = snakeHead.x+1;\n    snakeBody[0].x = snakeHead.x;\n    snakeBody[0].y = snakeHead.y;\n}\n//蛇向上转\nvoid setSnakeUp()\n{\n    for (int i = last-1; i &gt;= 1; i--)\n        snakeBody[i] = snakeBody[i - 1];\n    snakeHead.y = snakeHead.y - 1;\n    snakeHead.x = snakeHead.x;\n    snakeBody[0].x = snakeHead.x;\n    snakeBody[0].y = snakeHead.y;\n}\n//蛇向下转\nvoid setSnakeDown()\n{\n    for (int i = last-1; i &gt;= 1; i--)\n        snakeBody[i] = snakeBody[i - 1];\n    snakeHead.y = snakeHead.y + 1;\n    snakeHead.x = snakeHead.x;\n    snakeBody[0].x = snakeHead.x;\n    snakeBody[0].y = snakeHead.y;\n}\n//蛇直走\nvoid setSnakeForward()\n{\n    if (snakeBody[0].y &lt; snakeBody[1].y)\n        snakeHead.y = snakeHead.y - 1;\n    if (snakeBody[0].y &gt; snakeBody[1].y)\n        snakeHead.y = snakeHead.y + 1;\n    if (snakeBody[0].x &lt; snakeBody[1].x)\n        snakeHead.x = snakeHead.x - 1;\n    if (snakeBody[0].x &gt; snakeBody[1].x)\n        snakeHead.x = snakeHead.x + 1;\n    for (int i = last; i &gt;= 1; i--)\n        snakeBody[i] = snakeBody[i - 1];\n    snakeBody[0].x = snakeHead.x;\n    snakeBody[0].y = snakeHead.y;\n}\n//蛇身加一点\nvoid addSnake()\n{\n    if (snakeBody[last - 1].y &lt; snakeBody[last - 2].y)\n    {\n        snakeBody[last] = snakeBody[last - 1];\n        snakeBody[last].y--;\n    }\n    if (snakeBody[last -1].y &gt; snakeBody[last -2].y)\n    {\n        snakeBody[last] = snakeBody[last - 1];\n        snakeBody[last].y++;\n    }\n    if (snakeBody[last -1].x &lt; snakeBody[last -2].x)\n    {\n        snakeBody[last] = snakeBody[last - 1];\n        snakeBody[last].x--;\n    }\n    if (snakeBody[last -1].x &gt; snakeBody[last -2].x)\n    {\n        snakeBody[last] = snakeBody[last - 1];\n        snakeBody[last].x++;\n    }\n    last++;\n    snakeHead.x = snakeBody[0].x;\n    snakeHead.y = snakeBody[0].y;\n}\n//判断蛇是否撞墙或撞自己\nint ifOut()\n{\n    //蛇是否到达边界\n    if (snakeBody[0].x == 50 || snakeBody[0].y == 30 || snakeBody[0].x == 0 || snakeBody[0].y == 0)\n        return 0;\n    //判断蛇是否撞到自己\n    for (int j = 1; j &lt;last; j++)\n    {\n        if ((snakeHead.x == snakeBody[j].x)&amp;&amp;(snakeHead.y == snakeBody[j].y))\n            return 0;\n    }\n    return 1;\n}\n//初步显示蛇的图案\nvoid snakeDisplay()\n{\n    gotoxy(snakeBody[0].x, snakeBody[0].y);\n    std::cout &lt;&lt; &quot;*&quot;;//显示蛇头\n    for (int a = 1; a &lt; last; a++)\n    {\n        //std::cout &lt;&lt; this-&gt;snakeBody[a].x &lt;&lt; this-&gt;snakeBody[a].y;\n        gotoxy(snakeBody[a].x, snakeBody[a].y);\n        std::cout &lt;&lt; &quot;#&quot;;\n    }\n}\n//判断蛇是否吃到食物\nint ifEat(double x,double y)\n{\n    if (this-&gt;snakeHead.x == x&amp;&amp;this-&gt;snakeHead.y == y)\n        return true;\n    else return false;\n}\n};\nint main()    {\n    double x, y, *a;\n    sPoint&lt;double&gt; body[20];//用于存储身体各点坐标\n    system(&quot;cls&quot;);\n    getWall();\n    Snake snake = Snake(sPoint&lt;double&gt;(15, 15), sPoint&lt;double&gt;(18, 15), 4, body);//初始化蛇\n    snake.snakeDisplay();\n    a=setFood();\n    x = a[0]; y = a[1];\n    char ch = &apos;/0&apos;;\n    Sleep(5000);\n    //当没有键按下，蛇往前走\n    while (!_kbhit())\n    {\n        snake.setSnakeForward();\n        Sleep(300);\n        system(&quot;cls&quot;);\n        getWall();\n        gotoxy(x,y);\n        cout &lt;&lt; &quot;0&quot;;\n        snake.snakeDisplay();\n        if (snake.ifEat(x, y))\n        {\n            snake.addSnake();\n            system(&quot;cls&quot;);\n            getWall();\n            gotoxy(x, y);\n            cout &lt;&lt; &quot;0&quot;;\n            setFood();\n            snake.snakeDisplay();\n        }\n        if (!snake.ifOut())\n            return 0;\n    }\n    while (1) {\n        if (_kbhit())\n        {\n            ch = _getche();//ch记录按下的键是什么\n            switch (ch)\n            {\n            case &apos;d&apos;:\n                snake.setSnakeRight();\n                Sleep(200);\n                system(&quot;cls&quot;);\n                getWall();\n                gotoxy(x, y);\n                cout &lt;&lt; &quot;0&quot;;\n                snake.snakeDisplay();\n                break;\n            case &apos;a&apos;:\n                snake.setSnakeLeft();\n                Sleep(200);\n                system(&quot;cls&quot;);\n                getWall();\n                gotoxy(x, y);\n                cout &lt;&lt; &quot;0&quot;;\n                snake.snakeDisplay();\n                break;\n            case &apos;w&apos;:\n                snake.setSnakeUp();\n                Sleep(200);\n                system(&quot;cls&quot;);\n                getWall();\n                gotoxy(x, y);\n                cout &lt;&lt; &quot;0&quot;;\n                snake.snakeDisplay();\n                break;\n            case &apos;s&apos;:\n                snake.setSnakeDown();\n                Sleep(200);\n                system(&quot;cls&quot;);\n                getWall();\n                gotoxy(x, y);\n                cout &lt;&lt; &quot;0&quot;;\n                snake.snakeDisplay();\n                break;\n            case &apos;p&apos;:\n                return 0;\n            default:\n                break;\n            }\n        }\n        while (!_kbhit())\n        {\n            snake.setSnakeForward();\n            Sleep(300);\n            system(&quot;cls&quot;);\n            getWall();\n            gotoxy(x, y);\n            cout &lt;&lt; &quot;0&quot;;\n            snake.snakeDisplay();\n            if (snake.ifEat(x, y))\n            {\n                snake.addSnake();\n                system(&quot;cls&quot;);\n                getWall();\n                gotoxy(x, y);\n                cout &lt;&lt; &quot;0&quot;;\n                setFood();\n                snake.snakeDisplay();\n            }\n        }\n        if (!snake.ifOut())\n            return 0;\n        if (snake.ifEat(x,y))\n        {\n            snake.addSnake();\n            system(&quot;cls&quot;);\n            getWall();    \n            a=setFood();\n            x = a[0]; y = a[1];\n            snake.snakeDisplay();\n        }\n    }\n    return 0;\n}</code></pre>","prev":{"title":"Hello World","link":"post/hello-world"},"next":{"title":"飞机射击小游戏","link":"post/飞机射击小游戏-1"},"plink":"http://agentzxy.github.io/post/控制台实现贪吃蛇/"}