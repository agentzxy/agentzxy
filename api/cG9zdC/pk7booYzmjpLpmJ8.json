{"title":"银行排队","date":"2019-08-28T07:17:00.000Z","author":"Xinyi Zhang","link":"post/银行排队","updated":"2019-08-28T07:32:31.938Z","content":"<p>要解决的问题——银行一天之内的：</p>\n<p>1.总客户数</p>\n<p>2.客户总逗留时间</p>\n<p>3.客户平均逗留时间</p>\n<p>银行排队问题可具体化为一个银行、队伍、客户，将客户到达事件、客户离开事件等一系列事件作为事件链表，客户作为链表节点，银行作为一个类。</p>\n<p>bank头文件：</p>\n<pre><code>#include &lt;queue&gt;\n#include &lt;list&gt;\n\n//事件链表\nstruct Event\n{\nint _occur_time;//事件发生时间\nint _type;//事件类型，0表示到达事件，1~4表示4个窗口离开事件\n};\n\n//银行链表的队伍结点\nstruct QueueNode\n{\nint _arrival_time;//客户到达时间\nint _duration_time;//客户在银行待的时间\n};\n\n//银行链表\nclass Bank\n{\npublic:\n//防止隐式转化\nexplicit Bank(int window = 4, int close_time = 8 * 3600);\n~Bank();\nvoid Simulation();\nprivate:\nint _queue_number; //队列个数\nint _close_time; //关门时间\nint _total_time;//所有客人待的总时间\nint _customer_number;//客户数目\nstd::list&lt;Event&gt; _event_list;//事件链表\nstd::queue&lt;QueueNode&gt; *_work_queue;//工作队伍队列\nvoid OpenForDay();\nvoid CustomerArrival(Event *event);//客户到达事件\nvoid CustomerDeparture(Event *event);//客户离开事件\nint FindShortestQueue();\nvoid SortEventList();\n};</code></pre><p>bank.cpp:</p>\n<pre><code>#include &quot;pch.h&quot;\n#include &lt;iostream&gt;\n#include &quot;bank.h&quot;\n#include &lt;clocale&gt;\n#include &lt;chrono&gt;\n#include &lt;cstdlib&gt;\n\nBank::Bank(int window, int close_time) :_queue_number(window), _close_time(close_time), _total_time(0), _customer_number(0)\n{\n_work_queue = new std::queue&lt;QueueNode&gt;[window];//产生一个新的工作队列\nsrand(std::chrono::system_clock::to_time_t(std::chrono::system_clock::now()));//产生伪随机序列\n}\nBank::~Bank()\n{\ndelete[] _work_queue;\n}\nvoid Bank::OpenForDay()\n{\n//第一个客户到达,将第一个客户到达事件压入栈\n_event_list.push_back({ 0,0 });\n}\nvoid Bank::CustomerArrival(Event *event)\n{\n++_customer_number;//客户数加一\nint duration_time, inter_time;//inter_time:下一个客户隔多长时间来\nduration_time = rand() % 1800 + 1;//一个客户最多30分钟\ninter_time = rand() % 600 + 1;//最多10分钟来一个客户\n\n//下一个客户到达时间\nint t = event-&gt;_occur_time + inter_time;\n\n//假设银行未关门\nif (t &lt; _close_time)\n{\n_event_list.push_back({ t,0 });//将下一个客户到达事件压栈\nSortEventList();//整理、排序事件\n}\nint i;\ni = FindShortestQueue();//i为最短队列\n//将新客户压入最短队列\n_work_queue[i].push({ event-&gt;_occur_time,duration_time });\n//生成i队列最后一个人的离开事件\nif (_work_queue[i].size() == 1)\n{\n_event_list.push_back({ event-&gt;_occur_time + duration_time,i + 1 });\nSortEventList();\n}\n}\n\nvoid Bank::CustomerDeparture(Event *event)\n{\nint i = event-&gt;_type - 1;//i表示1~4哪个队伍离开\nQueueNode customer;\n//客户离开，从队伍中弹出\ncustomer = _work_queue[i].front();\n_work_queue[i].pop();\n//客户总耗时=之前的耗时+此刻的耗时\n_total_time += event-&gt;_occur_time - customer._arrival_time;\nif (!_work_queue[i].empty()) {\ncustomer = _work_queue[i].front();\n_event_list.push_back(\n    { customer._duration_time + event-&gt;_occur_time, i + 1 });\nSortEventList();\n}\n}\n\nint Bank::FindShortestQueue()\n{\nint result = 0;\nfor (int i = 0; i &lt; _queue_number; ++i) {\nif (_work_queue[result].size() &gt; _work_queue[i].size())\n    result = i;\n}\nreturn result;\n}\nvoid Bank::SortEventList()\n{\n// Lambda表达式\n_event_list.sort([](const Event &amp;e1, const Event &amp;e2) -&gt; bool {return e1._occur_time &lt; e2._occur_time; });\n}\n\n//模拟仿真排队\nvoid Bank::Simulation()\n{\nOpenForDay();\nEvent event;\nwhile (!_event_list.empty()) {\nevent = _event_list.front();\n_event_list.pop_front();\nif (event._type == 0) // 到达事件\n    CustomerArrival(&amp;event);\nelse\n    CustomerDeparture(&amp;event);\n}\n// 计算并输出平均逗留时间\nstd::wcout &lt;&lt; L&quot;客户数：&quot; &lt;&lt; _customer_number &lt;&lt; std::endl\n&lt;&lt; L&quot;总逗留时间（小时）：&quot; &lt;&lt; (double)_total_time / 3600.0\n&lt;&lt; std::endl\n&lt;&lt; L&quot;平均逗留时间（分钟）：&quot;\n&lt;&lt; (double)_total_time / (double)(_customer_number * 60)\n&lt;&lt; std::endl;\n}\nint wmain(int argc, wchar_t *argv[], wchar_t *env[])\n{\n_wsetlocale(LC_ALL, L&quot;&quot;);\nBank bank;\nbank.Simulation();\nreturn 0;\n}</code></pre><p>运行结果：</p>\n<p>客户数：79</p>\n<p>总逗留时间（小时）：20.8842</p>\n<p>平均逗留时间（分钟）：15.8614</p>\n","next":{"title":"银行排队问题","link":"post/银行排队问题"},"plink":"http://yoursite.com/post/银行排队/"}