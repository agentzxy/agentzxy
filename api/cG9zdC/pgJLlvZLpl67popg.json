{"title":"回文数","date":"2019-06-02T12:02:00.000Z","author":"Xinyi Zhang","link":"post/递归问题","tags":["recursion"],"updated":"2019-06-02T12:26:07.280Z","content":"<p>最近数据结构刚刚学了递归问题，感觉理解的不太到位，刚好leetcode刷题刷到了两个递归问题，对递归算是更进一步理解了吧。</p>\n<p>leetcode—22.括号生成</p>\n<p>给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。</p>\n<p>例如，给出 n = 3，生成结果为：</p>\n<p>[<br>  “((()))”,<br>  “(()())”,<br>  “(())()”,<br>  “()(())”,<br>  “()()()”<br>]</p>\n<p>当加入一个左括号时，剩余的可看作新的组合，但右括号的个数必须大于左括号的个数时，才表明可以加入右括号，C++代码如下：</p>\n<pre><code>vector&lt;string&gt; res;\nvoid back(string s,int i,int j){\n        int n;\n        if(i==0&amp;&amp;j==0)\n        {\n            res.push_back(s);\n            return;\n        }\n        if(i&gt;0)\n            back(s+&apos;(&apos;,i-1,j);\n        if(j&gt;i)\n            back(s+&apos;)&apos;,i,j-1);\n    }\nvector&lt;string&gt; generateParenthesis(int n) {\n    back(&quot;&quot;,n,n);\n    return res;\n}</code></pre><p>leetcode—39.组合总数</p>\n<p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>\n<p>candidates 中的数字可以无限制重复被选取。</p>\n<p>说明：</p>\n<p>所有数字（包括 target）都是正整数。<br>解集不能包含重复的组合。 </p>\n<p>示例 1:</p>\n<p>输入: candidates = [2,3,6,7], target = 7,<br>所求解集为:<br>[<br>  [7],<br>  [2,2,3]<br>]</p>\n<p>示例 2:</p>\n<p>输入: candidates = [2,3,5], target = 8,<br>所求解集为:<br>[<br>  [2,2,2,2],<br>  [2,3,3],<br>  [3,5]<br>]</p>\n<p>利用递归求解，将数组中的第一个数提取出来，则可以看作是求candidates中所有可以使数字和为（target-第一个数字）的组合，以此类推，但必须注意不能有重复的组合，所以应该在后面的数被提取时，不能与前面的数相匹配。C++代码如下：</p>\n<pre><code>vector&lt;vector&lt;int&gt;&gt; res;\nvector&lt;int&gt; tmp;\nvector&lt;vector&lt;int&gt;&gt; combinationSum(vector&lt;int&gt;&amp; candidates, int target) {\n    com(0,candidates,target);\n    return res;\n}\nvoid com(int cur,vector&lt;int&gt;&amp; candidates,int target)\n{\n    int t;\n    t=target;\n    for(int i=cur;i&lt;candidates.size();i++)\n    {\n        if(target==0)\n        {\n            res.push_back(tmp);\n            return;\n        }\n        if(target&gt;0)\n        {\n            tmp.push_back(candidates[i]);\n            com(i,candidates,target-candidates[i]);\n            tmp.pop_back();\n        }\n        else continue;\n        target=t;\n\n    }\n}</code></pre>","next":{"title":"Hello World","link":"post/hello-world"},"plink":"http://yoursite.com/post/递归问题/"}